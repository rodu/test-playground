/*
    Introductory Asynchronous Testing

    One important aspect of web applications is the ability to respond to asynchronous events. Examples of asynchronous event are the loading of an external resource, a response received from the server carrying new data or other events generated by the user interacting with the application UI.

    The functional nature of the JavaScript language, makes it particularly suited to handle asynchronous operations. JavaScript allows a mixture of different constructs that can be used to handle asynchronous events very reliably.

    As we will see in this exercise, logic that responds to asynchronous calls also have some specific requirements with regards to testing.

    QUnit, the testing framework we are learning, offers some features out of the box to support asynchronous testing, which are very intuitive and easy to use.

 */

/*
    EXERCISE TEST

    

 */